schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type AllowedUrlTypes {
  coreTableName: CoreTableNames
  id: String1!
  tableId: String1!
  urlType: UrlTypes
  urlTypeId: String1!
}

type AllowedUrlTypesAggExp {
  _count: Int!
  id: StringAggExp!
  tableId: StringAggExp!
  urlTypeId: StringAggExp!
}

input AllowedUrlTypesBoolExp {
  _and: [AllowedUrlTypesBoolExp!]
  _not: AllowedUrlTypesBoolExp
  _or: [AllowedUrlTypesBoolExp!]
  coreTableName: CoreTableNamesBoolExp
  id: StringBoolExp
  tableId: StringBoolExp
  urlType: UrlTypesBoolExp
  urlTypeId: StringBoolExp
}

input AllowedUrlTypesFilterInput {
  limit: Int
  offset: Int
  where: AllowedUrlTypesBoolExp
}

scalar AlphaVybe_RankingInterval

type AssetDeployments {
  asset: Assets
  assetId: String1!
  deploymentId: String1!
  id: String1!
  smartContractDeployment: SmartContractDeployments
}

type AssetDeploymentsAggExp {
  _count: Int!
  assetId: StringAggExp!
  deploymentId: StringAggExp!
  id: StringAggExp!
}

input AssetDeploymentsFilterInput {
  limit: Int
  offset: Int
  order_by: [AssetDeploymentsOrderBy!]
  where: assetDeploymentsBoolExp
}

input AssetDeploymentsOrderBy {
  asset: AssetsOrderBy
  assetId: OrderBy
  deploymentId: OrderBy
  id: OrderBy
  smartContractDeployment: SmartContractDeploymentsOrderBy
}

type AssetStandards {
  definition: String1!
  id: String1!
  name: String1!
  slug: String1!
  smartContractDeployments(limit: Int, offset: Int, order_by: [SmartContractDeploymentsOrderBy!], where: SmartContractDeploymentsBoolExp): [SmartContractDeployments!]
  smartContractDeploymentsAggregate(filter_input: SmartContractDeploymentsFilterInput): SmartContractDeploymentsAggExp!
}

type AssetStandardsAggExp {
  _count: Int!
  definition: StringAggExp!
  id: StringAggExp!
  name: StringAggExp!
  slug: StringAggExp!
}

input AssetStandardsBoolExp {
  _and: [AssetStandardsBoolExp!]
  _not: AssetStandardsBoolExp
  _or: [AssetStandardsBoolExp!]
  definition: StringBoolExp
  id: StringBoolExp
  name: StringBoolExp
  slug: StringBoolExp
  smartContractDeployments: SmartContractDeploymentsBoolExp
}

input AssetStandardsFilterInput {
  limit: Int
  offset: Int
  order_by: [AssetStandardsOrderBy!]
  where: AssetStandardsBoolExp
}

input AssetStandardsOrderBy {
  definition: OrderBy
  id: OrderBy
  name: OrderBy
  slug: OrderBy
}

type AssetStatuses {
  assets(limit: Int, offset: Int, order_by: [AssetsOrderBy!], where: AssetsBoolExp): [Assets!]
  assetsAggregate(filter_input: AssetsFilterInput): AssetsAggExp!
  definition: String1!
  id: String1!
  name: String1!
  slug: String1!
}

type AssetStatusesAggExp {
  _count: Int!
  definition: StringAggExp!
  id: StringAggExp!
  name: StringAggExp!
  slug: StringAggExp!
}

input AssetStatusesBoolExp {
  _and: [AssetStatusesBoolExp!]
  _not: AssetStatusesBoolExp
  _or: [AssetStatusesBoolExp!]
  assets: AssetsBoolExp
  definition: StringBoolExp
  id: StringBoolExp
  name: StringBoolExp
  slug: StringBoolExp
}

input AssetStatusesFilterInput {
  limit: Int
  offset: Int
  order_by: [AssetStatusesOrderBy!]
  where: AssetStatusesBoolExp
}

input AssetStatusesOrderBy {
  definition: OrderBy
  id: OrderBy
  name: OrderBy
  slug: OrderBy
}

type AssetSupportTypes {
  definition: String1!
  id: String1!
  name: String1!
  productAssetRelationships(limit: Int, offset: Int, order_by: [ProductAssetRelationshipsOrderBy!], where: ProductAssetRelationshipsBoolExp): [ProductAssetRelationships!]
  productAssetRelationshipsAggregate(filter_input: ProductAssetRelationshipsFilterInput): ProductAssetRelationshipsAggExp!
  slug: String1!
}

type AssetSupportTypesAggExp {
  _count: Int!
  definition: StringAggExp!
  id: StringAggExp!
  name: StringAggExp!
  slug: StringAggExp!
}

input AssetSupportTypesBoolExp {
  _and: [AssetSupportTypesBoolExp!]
  _not: AssetSupportTypesBoolExp
  _or: [AssetSupportTypesBoolExp!]
  definition: StringBoolExp
  id: StringBoolExp
  name: StringBoolExp
  productAssetRelationships: ProductAssetRelationshipsBoolExp
  slug: StringBoolExp
}

input AssetSupportTypesFilterInput {
  limit: Int
  offset: Int
  order_by: [AssetSupportTypesOrderBy!]
  where: AssetSupportTypesBoolExp
}

input AssetSupportTypesOrderBy {
  definition: OrderBy
  id: OrderBy
  name: OrderBy
  slug: OrderBy
}

type AssetTypes {
  assets(limit: Int, offset: Int, order_by: [AssetsOrderBy!], where: AssetsBoolExp): [Assets!]
  assetsAggregate(filter_input: AssetsFilterInput): AssetsAggExp!
  definition: String1!
  id: String1!
  name: String1!
  slug: String1!
}

type AssetTypesAggExp {
  _count: Int!
  definition: StringAggExp!
  id: StringAggExp!
  name: StringAggExp!
  slug: StringAggExp!
}

input AssetTypesBoolExp {
  _and: [AssetTypesBoolExp!]
  _not: AssetTypesBoolExp
  _or: [AssetTypesBoolExp!]
  assets: AssetsBoolExp
  definition: StringBoolExp
  id: StringBoolExp
  name: StringBoolExp
  slug: StringBoolExp
}

input AssetTypesFilterInput {
  limit: Int
  offset: Int
  order_by: [AssetTypesOrderBy!]
  where: AssetTypesBoolExp
}

input AssetTypesOrderBy {
  definition: OrderBy
  id: OrderBy
  name: OrderBy
  slug: OrderBy
}

type AssetUrls {
  id: String1
  rowId: String1
  tableId: String1
  url: String1
  urlType: UrlTypes
  urlTypeId: String1
}

input AssetUrlsBoolExp {
  _and: [AssetUrlsBoolExp!]
  _not: AssetUrlsBoolExp
  _or: [AssetUrlsBoolExp!]
  id: StringBoolExp
  rowId: StringBoolExp
  tableId: StringBoolExp
  url: StringBoolExp
  urlType: UrlTypesBoolExp
  urlTypeId: StringBoolExp
}

input AssetUrlsOrderBy {
  id: OrderBy
  rowId: OrderBy
  tableId: OrderBy
  url: OrderBy
  urlType: UrlTypesOrderBy
  urlTypeId: OrderBy
}

"""
A concise, one-sentence summary of the Asset's key characteristics, use case, or value proposition. Limit to 200 characters and avoid subjective claims.
"""
type Assets {
  assetDeployments(limit: Int, offset: Int, order_by: [AssetDeploymentsOrderBy!], where: assetDeploymentsBoolExp): [AssetDeployments!]
  assetDeploymentsAggregate(filter_input: AssetDeploymentsFilterInput): AssetDeploymentsAggExp!
  assetStatus: AssetStatuses
  """
  The current development or access stage of the asset. Refer to the standardized list of asset status options.
  """
  assetStatusId: String1
  assetType: AssetTypes
  """
  The primary category or function of the Asset (e.g. Currency, Utility, Security) and what is does.
  """
  assetTypeId: String1
  derivativeAssets(limit: Int, offset: Int, order_by: [DerivativeAssetsOrderBy!], where: DerivativeAssetsBoolExp): [DerivativeAssets!]
  derivativeAssetsAggregate(filter_input: DerivativeAssetsFilterInput): DerivativeAssetsAggExp!
  derivativeAssetsByBaseAssetId(limit: Int, offset: Int, order_by: [DerivativeAssetsOrderBy!], where: DerivativeAssetsBoolExp): [DerivativeAssets!]
  derivativeAssetsByBaseAssetIdAggregate(filter_input: DerivativeAssetsFilterInput): DerivativeAssetsAggExp!
  """
  A concise, one-sentence summary of the Asset's key characteristics, use case, or value proposition. Limit to 200 characters and avoid subjective claims.
  """
  description: String1!
  """
  A square PNG but ideally an SVG image file representing the Asset's icon or logo, with a transparent background and a minimum resolution of 128x128 pixels.
  """
  icon: String1!
  id: String1!
  """
  The official name of the Asset as used in its branding, marketing, and trading materials.
  """
  name: String1!
  productAssetRelationships(limit: Int, offset: Int, order_by: [ProductAssetRelationshipsOrderBy!], where: ProductAssetRelationshipsBoolExp): [ProductAssetRelationships!]
  productAssetRelationshipsAggregate(filter_input: ProductAssetRelationshipsFilterInput): ProductAssetRelationshipsAggExp!
  root: Roots
  rootId: String1!
  """
  The unique trading symbol used to represent the Asset on exchanges and trading platforms. Use only capital letters and numbers.
  """
  ticker: String1!
  urls(limit: Int, offset: Int, order_by: [AssetUrlsOrderBy!], where: AssetUrlsBoolExp): [AssetUrls!]
}

type AssetsAggExp {
  _count: Int!
  assetStatusId: StringAggExp!
  assetTypeId: StringAggExp!
  description: StringAggExp!
  icon: StringAggExp!
  id: StringAggExp!
  name: StringAggExp!
  rootId: StringAggExp!
  ticker: StringAggExp!
}

input AssetsBoolExp {
  _and: [AssetsBoolExp!]
  _not: AssetsBoolExp
  _or: [AssetsBoolExp!]
  assetDeployments: assetDeploymentsBoolExp
  assetStatus: AssetStatusesBoolExp
  assetStatusId: StringBoolExp
  assetType: AssetTypesBoolExp
  assetTypeId: StringBoolExp
  derivativeAssets: DerivativeAssetsBoolExp
  derivativeAssetsByBaseAssetId: DerivativeAssetsBoolExp
  description: StringBoolExp
  icon: StringBoolExp
  id: StringBoolExp
  name: StringBoolExp
  productAssetRelationships: ProductAssetRelationshipsBoolExp
  root: RootsBoolExp
  rootId: StringBoolExp
  ticker: StringBoolExp
}

input AssetsFilterInput {
  limit: Int
  offset: Int
  order_by: [AssetsOrderBy!]
  where: AssetsBoolExp
}

input AssetsOrderBy {
  assetStatus: AssetStatusesOrderBy
  assetStatusId: OrderBy
  assetType: AssetTypesOrderBy
  assetTypeId: OrderBy
  description: OrderBy
  icon: OrderBy
  id: OrderBy
  name: OrderBy
  root: RootsOrderBy
  rootId: OrderBy
  ticker: OrderBy
}

type CoreTableNames {
  id: String1!
  tableName: String1!
  urls(limit: Int, offset: Int, order_by: [UrlsOrderBy!], where: UrlsBoolExp): [Urls!]
  urlsAggregate(filter_input: UrlsFilterInput): UrlsAggExp!
}

type CoreTableNamesAggExp {
  _count: Int!
  id: StringAggExp!
  tableName: StringAggExp!
}

input CoreTableNamesBoolExp {
  _and: [CoreTableNamesBoolExp!]
  _not: CoreTableNamesBoolExp
  _or: [CoreTableNamesBoolExp!]
  id: StringBoolExp
  tableName: StringBoolExp
  urls: UrlsBoolExp
}

input CoreTableNamesFilterInput {
  limit: Int
  offset: Int
  order_by: [CoreTableNamesOrderBy!]
  where: CoreTableNamesBoolExp
}

input CoreTableNamesOrderBy {
  id: OrderBy
  tableName: OrderBy
}

type Countries {
  code: String1!
  entities(limit: Int, offset: Int, order_by: [EntitiesOrderBy!], where: EntitiesBoolExp): [Entities!]
  entitiesAggregate(filter_input: EntitiesFilterInput): EntitiesAggExp!
  id: String1!
  name: String1!
}

type CountriesAggExp {
  _count: Int!
  code: StringAggExp!
  id: StringAggExp!
  name: StringAggExp!
}

input CountriesBoolExp {
  _and: [CountriesBoolExp!]
  _not: CountriesBoolExp
  _or: [CountriesBoolExp!]
  code: StringBoolExp
  entities: EntitiesBoolExp
  id: StringBoolExp
  name: StringBoolExp
}

input CountriesFilterInput {
  limit: Int
  offset: Int
  order_by: [CountriesOrderBy!]
  where: CountriesBoolExp
}

input CountriesOrderBy {
  code: OrderBy
  id: OrderBy
  name: OrderBy
}

scalar Date

type DateAggExp {
  _count: Int!
  _count_distinct: Int!
}

input DateBoolExp {
  _eq: Date
  _gt: Date
  _gte: Date
  _in: [Date!]
  _is_null: Boolean
  _lt: Date
  _lte: Date
}

type DeploymentTypes {
  definition: String1!
  id: String1!
  name: String1!
  slug: String1!
  smartContractDeployments(limit: Int, offset: Int, order_by: [SmartContractDeploymentsOrderBy!], where: SmartContractDeploymentsBoolExp): [SmartContractDeployments!]
  smartContractDeploymentsAggregate(filter_input: SmartContractDeploymentsFilterInput): SmartContractDeploymentsAggExp!
}

type DeploymentTypesAggExp {
  _count: Int!
  definition: StringAggExp!
  id: StringAggExp!
  name: StringAggExp!
  slug: StringAggExp!
}

input DeploymentTypesBoolExp {
  _and: [DeploymentTypesBoolExp!]
  _not: DeploymentTypesBoolExp
  _or: [DeploymentTypesBoolExp!]
  definition: StringBoolExp
  id: StringBoolExp
  name: StringBoolExp
  slug: StringBoolExp
  smartContractDeployments: SmartContractDeploymentsBoolExp
}

input DeploymentTypesFilterInput {
  limit: Int
  offset: Int
  order_by: [DeploymentTypesOrderBy!]
  where: DeploymentTypesBoolExp
}

input DeploymentTypesOrderBy {
  definition: OrderBy
  id: OrderBy
  name: OrderBy
  slug: OrderBy
}

type DerivativeAssets {
  asset: Assets
  assetByBaseAssetId: Assets
  baseAssetId: String1!
  derivativeAssetId: String1!
  id: String1!
}

type DerivativeAssetsAggExp {
  _count: Int!
  baseAssetId: StringAggExp!
  derivativeAssetId: StringAggExp!
  id: StringAggExp!
}

input DerivativeAssetsBoolExp {
  _and: [DerivativeAssetsBoolExp!]
  _not: DerivativeAssetsBoolExp
  _or: [DerivativeAssetsBoolExp!]
  asset: AssetsBoolExp
  assetByBaseAssetId: AssetsBoolExp
  baseAssetId: StringBoolExp
  derivativeAssetId: StringBoolExp
  id: StringBoolExp
}

input DerivativeAssetsFilterInput {
  limit: Int
  offset: Int
  order_by: [DerivativeAssetsOrderBy!]
  where: DerivativeAssetsBoolExp
}

input DerivativeAssetsOrderBy {
  asset: AssetsOrderBy
  assetByBaseAssetId: AssetsOrderBy
  baseAssetId: OrderBy
  derivativeAssetId: OrderBy
  id: OrderBy
}

type Entities {
  """
  The registered physical address of the Entity, including street, city, state/province (if applicable), and postal code.
  """
  address: String1!
  country: Countries
  countryId: String1
  """
  The date when the Entity was legally registered or incorporated. Use ISO 8601 format (YYYY-MM-DD) when possible.
  """
  dateOfIncorporation: Date
  entityType: EntityTypes
  """
  The legal structure or registration category of the Entity (e.g. LLC, Foundation, Corporation).
  """
  entityTypeId: String1
  id: String1!
  """
  The Legal Entity Identifier (LEI) code assigned to the Entity by the Global Legal Entity Identifier Foundation (GLEIF), if applicable.
  """
  leiNumber: String1!
  """
  The registration number assigned to the Entity by the relevant regulatory body or government agency, if applicable.
  """
  localRegistrationNumber: String1!
  """
  The legal name of the Entity as registered with the relevant regulatory bodies or government agencies.
  """
  name: String1!
  root: Roots
  rootId: String1!
  """
  The unique tax identification number assigned to the Entity by the relevant tax authority, if applicable.
  """
  taxIdentificationNumber: String1!
  """
  Any additional trading names, brands, or trademarks associated with the Entity, separate from its legal name.
  """
  tradeName: String1!
  urls(limit: Int, offset: Int, order_by: [EntityUrlsOrderBy!], where: EntityUrlsBoolExp): [EntityUrls!]
}

type EntitiesAggExp {
  _count: Int!
  address: StringAggExp!
  countryId: StringAggExp!
  dateOfIncorporation: DateAggExp!
  entityTypeId: StringAggExp!
  id: StringAggExp!
  leiNumber: StringAggExp!
  localRegistrationNumber: StringAggExp!
  name: StringAggExp!
  rootId: StringAggExp!
  taxIdentificationNumber: StringAggExp!
  tradeName: StringAggExp!
}

input EntitiesBoolExp {
  _and: [EntitiesBoolExp!]
  _not: EntitiesBoolExp
  _or: [EntitiesBoolExp!]
  address: StringBoolExp
  country: CountriesBoolExp
  countryId: StringBoolExp
  dateOfIncorporation: DateBoolExp
  entityType: EntityTypesBoolExp
  entityTypeId: StringBoolExp
  id: StringBoolExp
  leiNumber: StringBoolExp
  localRegistrationNumber: StringBoolExp
  name: StringBoolExp
  root: RootsBoolExp
  rootId: StringBoolExp
  taxIdentificationNumber: StringBoolExp
  tradeName: StringBoolExp
}

input EntitiesFilterInput {
  limit: Int
  offset: Int
  order_by: [EntitiesOrderBy!]
  where: EntitiesBoolExp
}

input EntitiesOrderBy {
  address: OrderBy
  country: CountriesOrderBy
  countryId: OrderBy
  dateOfIncorporation: OrderBy
  entityType: EntityTypesOrderBy
  entityTypeId: OrderBy
  id: OrderBy
  leiNumber: OrderBy
  localRegistrationNumber: OrderBy
  name: OrderBy
  root: RootsOrderBy
  rootId: OrderBy
  taxIdentificationNumber: OrderBy
  tradeName: OrderBy
}

type EntityTypes {
  definition: String1!
  entities(limit: Int, offset: Int, order_by: [EntitiesOrderBy!], where: EntitiesBoolExp): [Entities!]
  entitiesAggregate(filter_input: EntitiesFilterInput): EntitiesAggExp!
  id: String1!
  name: String1!
  slug: String1!
}

type EntityTypesAggExp {
  _count: Int!
  definition: StringAggExp!
  id: StringAggExp!
  name: StringAggExp!
  slug: StringAggExp!
}

input EntityTypesBoolExp {
  _and: [EntityTypesBoolExp!]
  _not: EntityTypesBoolExp
  _or: [EntityTypesBoolExp!]
  definition: StringBoolExp
  entities: EntitiesBoolExp
  id: StringBoolExp
  name: StringBoolExp
  slug: StringBoolExp
}

input EntityTypesFilterInput {
  limit: Int
  offset: Int
  order_by: [EntityTypesOrderBy!]
  where: EntityTypesBoolExp
}

input EntityTypesOrderBy {
  definition: OrderBy
  id: OrderBy
  name: OrderBy
  slug: OrderBy
}

type EntityUrls {
  id: String1
  rowId: String1
  tableId: String1
  url: String1
  urlType: UrlTypes
  urlTypeId: String1
}

input EntityUrlsBoolExp {
  _and: [EntityUrlsBoolExp!]
  _not: EntityUrlsBoolExp
  _or: [EntityUrlsBoolExp!]
  id: StringBoolExp
  rowId: StringBoolExp
  tableId: StringBoolExp
  url: StringBoolExp
  urlType: UrlTypesBoolExp
  urlTypeId: StringBoolExp
}

input EntityUrlsOrderBy {
  id: OrderBy
  rowId: OrderBy
  tableId: OrderBy
  url: OrderBy
  urlType: UrlTypesOrderBy
  urlTypeId: OrderBy
}

scalar Float64

scalar Float641

scalar Int8

type Int8AggExp {
  _count: Int!
  _count_distinct: Int!
  avg: Float64!
  count: Int64!
  max: Int8!
  min: Int8!
  sum: Int64!
}

input Int8BoolExp {
  _eq: Int8
  _gt: Int8
  _gte: Int8
  _in: [Int8!]
  _is_null: Boolean
  _lt: Int8
  _lte: Int8
}

scalar Int32

scalar Int64

type Int64AggExp_1 {
  _count: Int!
  _count_distinct: Int!
  avg: Float64!
  count: Int64!
  max: Int64!
  min: Int64!
  sum: Int64!
}

input Int64BoolExp_1 {
  _eq: Int64
  _gt: Int64
  _gte: Int64
  _in: [Int64!]
  _is_null: Boolean
  _lt: Int64
  _lte: Int64
}

scalar Int64_1

scalar Json

type JsonAggExp_1 {
  _count: Int!
  _count_distinct: Int!
}

input JsonBoolExp_1 {
  _contains: Json
  _eq: Json
  _is_null: Boolean
}

scalar Json_1

type Mutation {
  """Send an HTTP request"""
  sendHttpRequest(
    """Additional request headers"""
    additionalHeaders: Json
    """Request body"""
    body: Json
    """Headers forwarded from the Hasura engine"""
    headers: Json
    """Request method"""
    method: RawHttpMethod
    """Retry policy"""
    retry: RetryPolicyInput
    """Request timeout in seconds"""
    timeout: Int32
    """Request URL"""
    url: String!
  ): Json
}

enum OrderBy {
  """Sorts the data in ascending order"""
  Asc
  """Sorts the data in descending order"""
  Desc
}

type ProductAssetRelationships {
  asset: Assets
  assetId: String1!
  assetSupportType: AssetSupportTypes
  assetSupportTypeId: String1
  id: String1!
  product: Products
  productId: String1!
}

type ProductAssetRelationshipsAggExp {
  _count: Int!
  assetId: StringAggExp!
  assetSupportTypeId: StringAggExp!
  id: StringAggExp!
  productId: StringAggExp!
}

input ProductAssetRelationshipsBoolExp {
  _and: [ProductAssetRelationshipsBoolExp!]
  _not: ProductAssetRelationshipsBoolExp
  _or: [ProductAssetRelationshipsBoolExp!]
  asset: AssetsBoolExp
  assetId: StringBoolExp
  assetSupportType: AssetSupportTypesBoolExp
  assetSupportTypeId: StringBoolExp
  id: StringBoolExp
  product: ProductsBoolExp
  productId: StringBoolExp
}

input ProductAssetRelationshipsFilterInput {
  limit: Int
  offset: Int
  order_by: [ProductAssetRelationshipsOrderBy!]
  where: ProductAssetRelationshipsBoolExp
}

input ProductAssetRelationshipsOrderBy {
  asset: AssetsOrderBy
  assetId: OrderBy
  assetSupportType: AssetSupportTypesOrderBy
  assetSupportTypeId: OrderBy
  id: OrderBy
  product: ProductsOrderBy
  productId: OrderBy
}

type ProductDeployments {
  deploymentId: String1!
  id: String1!
  product: Products
  productId: String1!
  smartContractDeployment: SmartContractDeployments
}

type ProductDeploymentsAggExp {
  _count: Int!
  deploymentId: StringAggExp!
  id: StringAggExp!
  productId: StringAggExp!
}

input ProductDeploymentsBoolExp {
  _and: [ProductDeploymentsBoolExp!]
  _not: ProductDeploymentsBoolExp
  _or: [ProductDeploymentsBoolExp!]
  deploymentId: StringBoolExp
  id: StringBoolExp
  product: ProductsBoolExp
  productId: StringBoolExp
  smartContractDeployment: SmartContractDeploymentsBoolExp
}

input ProductDeploymentsFilterInput {
  limit: Int
  offset: Int
  order_by: [ProductDeploymentsOrderBy!]
  where: ProductDeploymentsBoolExp
}

input ProductDeploymentsOrderBy {
  deploymentId: OrderBy
  id: OrderBy
  product: ProductsOrderBy
  productId: OrderBy
  smartContractDeployment: SmartContractDeploymentsOrderBy
}

type ProductStatuses {
  definition: String1!
  id: String1!
  name: String1!
  products(limit: Int, offset: Int, order_by: [ProductsOrderBy!], where: ProductsBoolExp): [Products!]
  productsAggregate(filter_input: ProductsFilterInput): ProductsAggExp!
  slug: String1!
}

type ProductStatusesAggExp {
  _count: Int!
  definition: StringAggExp!
  id: StringAggExp!
  name: StringAggExp!
  slug: StringAggExp!
}

input ProductStatusesBoolExp {
  _and: [ProductStatusesBoolExp!]
  _not: ProductStatusesBoolExp
  _or: [ProductStatusesBoolExp!]
  definition: StringBoolExp
  id: StringBoolExp
  name: StringBoolExp
  products: ProductsBoolExp
  slug: StringBoolExp
}

input ProductStatusesFilterInput {
  limit: Int
  offset: Int
  order_by: [ProductStatusesOrderBy!]
  where: ProductStatusesBoolExp
}

input ProductStatusesOrderBy {
  definition: OrderBy
  id: OrderBy
  name: OrderBy
  slug: OrderBy
}

type ProductTypes {
  definition: String1!
  id: String1!
  name: String1!
  products(limit: Int, offset: Int, order_by: [ProductsOrderBy!], where: ProductsBoolExp): [Products!]
  productsAggregate(filter_input: ProductsFilterInput): ProductsAggExp!
  slug: String1!
}

type ProductTypesAggExp {
  _count: Int!
  definition: StringAggExp!
  id: StringAggExp!
  name: StringAggExp!
  slug: StringAggExp!
}

input ProductTypesBoolExp {
  _and: [ProductTypesBoolExp!]
  _not: ProductTypesBoolExp
  _or: [ProductTypesBoolExp!]
  definition: StringBoolExp
  id: StringBoolExp
  name: StringBoolExp
  products: ProductsBoolExp
  slug: StringBoolExp
}

input ProductTypesFilterInput {
  limit: Int
  offset: Int
  order_by: [ProductTypesOrderBy!]
  where: ProductTypesBoolExp
}

input ProductTypesOrderBy {
  definition: OrderBy
  id: OrderBy
  name: OrderBy
  slug: OrderBy
}

type ProductUrls {
  id: String1
  rowId: String1
  tableId: String1
  url: String1
  urlType: UrlTypes
  urlTypeId: String1
}

input ProductUrlsBoolExp {
  _and: [ProductUrlsBoolExp!]
  _not: ProductUrlsBoolExp
  _or: [ProductUrlsBoolExp!]
  id: StringBoolExp
  rowId: StringBoolExp
  tableId: StringBoolExp
  url: StringBoolExp
  urlType: UrlTypesBoolExp
  urlTypeId: StringBoolExp
}

input ProductUrlsOrderBy {
  id: OrderBy
  rowId: OrderBy
  tableId: OrderBy
  url: OrderBy
  urlType: UrlTypesOrderBy
  urlTypeId: OrderBy
}

"""
A concise, objective statement explaining what the product does and who it is for.
"""
type Products {
  """
  A concise, objective statement explaining what the product does and who it is for.
  """
  description: String1!
  id: String1!
  """
  A boolean value indicating whether the product is the Profile's primary or flagship offering.
  """
  isMainProduct: Int8!
  """
  The date when the product was first launched or made publicly available. Use ISO 8601 format (YYYY-MM-DD) when possible.
  """
  launchDate: Date
  """
  The official name of the product as used in its branding, marketing, and user-facing materials.
  """
  name: String1!
  productAssetRelationships(limit: Int, offset: Int, order_by: [ProductAssetRelationshipsOrderBy!], where: ProductAssetRelationshipsBoolExp): [ProductAssetRelationships!]
  productAssetRelationshipsAggregate(filter_input: ProductAssetRelationshipsFilterInput): ProductAssetRelationshipsAggExp!
  productDeployments(limit: Int, offset: Int, order_by: [ProductDeploymentsOrderBy!], where: ProductDeploymentsBoolExp): [ProductDeployments!]
  productDeploymentsAggregate(filter_input: ProductDeploymentsFilterInput): ProductDeploymentsAggExp!
  productStatus: ProductStatuses
  """
  The current development or access stage of the product (e.g. Beta, Live, Deprecated).
  """
  productStatusId: String1
  productType: ProductTypes
  """
  The primary category or function of the product (e.g. exchange, wallet, lending platform). Refer to standardized list of product types.
  """
  productTypeId: String1
  root: Roots
  rootId: String1!
  supportsProducts(limit: Int, offset: Int, order_by: [SupportsProductsOrderBy!], where: SupportsProductsBoolExp): [SupportsProducts!]
  supportsProductsAggregate(filter_input: SupportsProductsFilterInput): SupportsProductsAggExp!
  supportsProductsBySupportsProductId(limit: Int, offset: Int, order_by: [SupportsProductsOrderBy!], where: SupportsProductsBoolExp): [SupportsProducts!]
  supportsProductsBySupportsProductIdAggregate(filter_input: SupportsProductsFilterInput): SupportsProductsAggExp!
  urls(limit: Int, offset: Int, order_by: [ProductUrlsOrderBy!], where: ProductUrlsBoolExp): [ProductUrls!]
}

type ProductsAggExp {
  _count: Int!
  description: StringAggExp!
  id: StringAggExp!
  isMainProduct: Int8AggExp!
  launchDate: DateAggExp!
  name: StringAggExp!
  productStatusId: StringAggExp!
  productTypeId: StringAggExp!
  rootId: StringAggExp!
}

input ProductsBoolExp {
  _and: [ProductsBoolExp!]
  _not: ProductsBoolExp
  _or: [ProductsBoolExp!]
  description: StringBoolExp
  id: StringBoolExp
  isMainProduct: Int8BoolExp
  launchDate: DateBoolExp
  name: StringBoolExp
  productAssetRelationships: ProductAssetRelationshipsBoolExp
  productDeployments: ProductDeploymentsBoolExp
  productStatus: ProductStatusesBoolExp
  productStatusId: StringBoolExp
  productType: ProductTypesBoolExp
  productTypeId: StringBoolExp
  root: RootsBoolExp
  rootId: StringBoolExp
  supportsProducts: SupportsProductsBoolExp
  supportsProductsBySupportsProductId: SupportsProductsBoolExp
}

input ProductsFilterInput {
  limit: Int
  offset: Int
  order_by: [ProductsOrderBy!]
  where: ProductsBoolExp
}

input ProductsOrderBy {
  description: OrderBy
  id: OrderBy
  isMainProduct: OrderBy
  launchDate: OrderBy
  name: OrderBy
  productStatus: ProductStatusesOrderBy
  productStatusId: OrderBy
  productType: ProductTypesOrderBy
  productTypeId: OrderBy
  root: RootsOrderBy
  rootId: OrderBy
}

type ProfileInfoUrls {
  id: String1
  rowId: String1
  tableId: String1
  url: String1
  urlType: UrlTypes
  urlTypeId: String1
}

input ProfileInfoUrlsBoolExp {
  _and: [ProfileInfoUrlsBoolExp!]
  _not: ProfileInfoUrlsBoolExp
  _or: [ProfileInfoUrlsBoolExp!]
  id: StringBoolExp
  rowId: StringBoolExp
  tableId: StringBoolExp
  url: StringBoolExp
  urlType: UrlTypesBoolExp
  urlTypeId: StringBoolExp
}

input ProfileInfoUrlsOrderBy {
  id: OrderBy
  rowId: OrderBy
  tableId: OrderBy
  url: OrderBy
  urlType: UrlTypesOrderBy
  urlTypeId: OrderBy
}

type ProfileInfos {
  """
  A more detailed overview of the Profile, including its mission, target audience, and key features or offerings. Limit to 500 characters and avoid subjective claims.
  """
  descriptionLong: String1!
  """Marketing-focused description intended for promotional contexts."""
  descriptionMarketing: String1
  """
  Provide an objective overview of the Profile's primary purpose, product, or service. Avoid subjective claims, marketing language, or unnecessary technical jargon. Focus on clear, factual information. Limit to 200 characters.
  """
  descriptionShort: String1!
  """
  The date when the Profile was first established, registered, or publicly announced. Use ISO 8601 format (YYYY-MM-DD) when possible. Can usually be shortened to Month and Year.
  """
  foundingDate: Date
  """
  Provide a profile icon that works on a white background and be transparent. Preferably an SVG image file. If it is a PNG, it should have a minimum resolution of 256px height.
  """
  icon: String1!
  id: String1!
  """
  Provide your full logo (wordmark + icon) that works on a white background and be transparent. Preferably an SVG image file. If it is a PNG, it should have a minimum resolution of 256px height.
  """
  logo: String1!
  """
  The full official name of the Profile as used in their branding and documentation.
  """
  name: String1!
  profileSector: ProfileSectors
  """
  The primary industry, use case, or problem space the Profile operates in or serves. Refer to standardized list of sectors and subsectors.
  """
  profileSectorId: String1
  profileStatus: ProfileStatuses
  """
  The current operational state of the Profile (e.g. Active, Inactive, Closed). Refer to the standardized list of status options.
  """
  profileStatusId: String1
  profileType: ProfileTypes
  """
  The primary operational category or business model of the Profile (e.g. DAO, project, investor, government). Refer to standardized list of Profile types.
  """
  profileTypeId: String1
  root: Roots
  rootId: String1!
  """
  A brief, memorable phrase or slogan used by the Profile to convey its mission or value proposition. If the tagline is in all caps or contains irregular spaces or line breaks, reformat it to a single line, single spaced, and sentence case.
  """
  tagLine: String1!
  urls(limit: Int, offset: Int, order_by: [ProfileInfoUrlsOrderBy!], where: ProfileInfoUrlsBoolExp): [ProfileInfoUrls!]
}

type ProfileInfosAggExp {
  _count: Int!
  descriptionLong: StringAggExp!
  descriptionMarketing: StringAggExp!
  descriptionShort: StringAggExp!
  foundingDate: DateAggExp!
  icon: StringAggExp!
  id: StringAggExp!
  logo: StringAggExp!
  name: StringAggExp!
  profileSectorId: StringAggExp!
  profileStatusId: StringAggExp!
  profileTypeId: StringAggExp!
  rootId: StringAggExp!
  tagLine: StringAggExp!
}

input ProfileInfosBoolExp {
  _and: [ProfileInfosBoolExp!]
  _not: ProfileInfosBoolExp
  _or: [ProfileInfosBoolExp!]
  descriptionLong: StringBoolExp
  descriptionMarketing: StringBoolExp
  descriptionShort: StringBoolExp
  foundingDate: DateBoolExp
  icon: StringBoolExp
  id: StringBoolExp
  logo: StringBoolExp
  name: StringBoolExp
  profileSector: ProfileSectorsBoolExp
  profileSectorId: StringBoolExp
  profileStatus: ProfileStatusesBoolExp
  profileStatusId: StringBoolExp
  profileType: ProfileTypesBoolExp
  profileTypeId: StringBoolExp
  root: RootsBoolExp
  rootId: StringBoolExp
  tagLine: StringBoolExp
}

input ProfileInfosFilterInput {
  limit: Int
  offset: Int
  order_by: [ProfileInfosOrderBy!]
  where: ProfileInfosBoolExp
}

input ProfileInfosOrderBy {
  descriptionLong: OrderBy
  descriptionMarketing: OrderBy
  descriptionShort: OrderBy
  foundingDate: OrderBy
  icon: OrderBy
  id: OrderBy
  logo: OrderBy
  name: OrderBy
  profileSector: ProfileSectorsOrderBy
  profileSectorId: OrderBy
  profileStatus: ProfileStatusesOrderBy
  profileStatusId: OrderBy
  profileType: ProfileTypesOrderBy
  profileTypeId: OrderBy
  root: RootsOrderBy
  rootId: OrderBy
  tagLine: OrderBy
}

type ProfileSectors {
  definition: String1!
  id: String1!
  name: String1!
  profileInfos(limit: Int, offset: Int, order_by: [ProfileInfosOrderBy!], where: ProfileInfosBoolExp): [ProfileInfos!]
  profileInfosAggregate(filter_input: ProfileInfosFilterInput): ProfileInfosAggExp!
  slug: String1!
}

type ProfileSectorsAggExp {
  _count: Int!
  definition: StringAggExp!
  id: StringAggExp!
  name: StringAggExp!
  slug: StringAggExp!
}

input ProfileSectorsBoolExp {
  _and: [ProfileSectorsBoolExp!]
  _not: ProfileSectorsBoolExp
  _or: [ProfileSectorsBoolExp!]
  definition: StringBoolExp
  id: StringBoolExp
  name: StringBoolExp
  profileInfos: ProfileInfosBoolExp
  slug: StringBoolExp
}

input ProfileSectorsFilterInput {
  limit: Int
  offset: Int
  order_by: [ProfileSectorsOrderBy!]
  where: ProfileSectorsBoolExp
}

input ProfileSectorsOrderBy {
  definition: OrderBy
  id: OrderBy
  name: OrderBy
  slug: OrderBy
}

type ProfileStatuses {
  definition: String1!
  id: String1!
  name: String1!
  profileInfos(limit: Int, offset: Int, order_by: [ProfileInfosOrderBy!], where: ProfileInfosBoolExp): [ProfileInfos!]
  profileInfosAggregate(filter_input: ProfileInfosFilterInput): ProfileInfosAggExp!
  slug: String1!
}

type ProfileStatusesAggExp {
  _count: Int!
  definition: StringAggExp!
  id: StringAggExp!
  name: StringAggExp!
  slug: StringAggExp!
}

input ProfileStatusesBoolExp {
  _and: [ProfileStatusesBoolExp!]
  _not: ProfileStatusesBoolExp
  _or: [ProfileStatusesBoolExp!]
  definition: StringBoolExp
  id: StringBoolExp
  name: StringBoolExp
  profileInfos: ProfileInfosBoolExp
  slug: StringBoolExp
}

input ProfileStatusesFilterInput {
  limit: Int
  offset: Int
  order_by: [ProfileStatusesOrderBy!]
  where: ProfileStatusesBoolExp
}

input ProfileStatusesOrderBy {
  definition: OrderBy
  id: OrderBy
  name: OrderBy
  slug: OrderBy
}

""" """
type ProfileTags {
  id: String1!
  root: Roots
  rootId: String1!
  tag: Tags
  tagId: String1!
}

type ProfileTagsAggExp {
  _count: Int!
  id: StringAggExp!
  rootId: StringAggExp!
  tagId: StringAggExp!
}

input ProfileTagsBoolExp {
  _and: [ProfileTagsBoolExp!]
  _not: ProfileTagsBoolExp
  _or: [ProfileTagsBoolExp!]
  id: StringBoolExp
  root: RootsBoolExp
  rootId: StringBoolExp
  tag: TagsBoolExp
  tagId: StringBoolExp
}

input ProfileTagsFilterInput {
  limit: Int
  offset: Int
  order_by: [ProfileTagsOrderBy!]
  where: ProfileTagsBoolExp
}

input ProfileTagsOrderBy {
  id: OrderBy
  root: RootsOrderBy
  rootId: OrderBy
  tag: TagsOrderBy
  tagId: OrderBy
}

type ProfileTypes {
  definition: String1!
  id: String1!
  name: String1!
  profileInfos(limit: Int, offset: Int, order_by: [ProfileInfosOrderBy!], where: ProfileInfosBoolExp): [ProfileInfos!]
  profileInfosAggregate(filter_input: ProfileInfosFilterInput): ProfileInfosAggExp!
  slug: String1!
}

type ProfileTypesAggExp {
  _count: Int!
  definition: StringAggExp!
  id: StringAggExp!
  name: StringAggExp!
  slug: StringAggExp!
}

input ProfileTypesBoolExp {
  _and: [ProfileTypesBoolExp!]
  _not: ProfileTypesBoolExp
  _or: [ProfileTypesBoolExp!]
  definition: StringBoolExp
  id: StringBoolExp
  name: StringBoolExp
  profileInfos: ProfileInfosBoolExp
  slug: StringBoolExp
}

input ProfileTypesFilterInput {
  limit: Int
  offset: Int
  order_by: [ProfileTypesOrderBy!]
  where: ProfileTypesBoolExp
}

input ProfileTypesOrderBy {
  definition: OrderBy
  id: OrderBy
  name: OrderBy
  slug: OrderBy
}

type ProgramRanking {
  """Solana program ID (address)"""
  programId: String!
  """Human-readable name of the program"""
  programName: String!
  """Numerical rank of the program"""
  programRank: Int32!
  """Ranking score between 0 and 1"""
  score: Float641!
  smartContract: SmartContracts
}

type ProgramRankingResponse {
  data: [ProgramRanking!]!
  """Unix timestamp of when the rankings were generated"""
  date: Int32!
  """Time interval used for ranking"""
  interval: String!
  """Maximum number of programs returned"""
  limit: Int32!
}

type Query {
  """Get ranked Solana programs"""
  AlphaVybe_Ranking(
    """Filter by program category"""
    category: String
    """Time interval for ranking"""
    interval: AlphaVybe_RankingInterval
    """Maximum number of programs to return"""
    limit: Int32
    """API Key for Vybe Network"""
    xApiKey: String!
  ): ProgramRankingResponse!
  allowedUrlTypes(limit: Int, offset: Int, where: AllowedUrlTypesBoolExp): [AllowedUrlTypes!]
  allowedUrlTypesAggregate(filter_input: AllowedUrlTypesFilterInput): AllowedUrlTypesAggExp
  allowedUrlTypesById(id: String1!): AllowedUrlTypes
  assetDeployments(limit: Int, offset: Int, order_by: [AssetDeploymentsOrderBy!], where: assetDeploymentsBoolExp): [AssetDeployments!]
  assetDeploymentsAggregate(filter_input: AssetDeploymentsFilterInput): AssetDeploymentsAggExp
  assetStandards(limit: Int, offset: Int, order_by: [AssetStandardsOrderBy!], where: AssetStandardsBoolExp): [AssetStandards!]
  assetStandardsAggregate(filter_input: AssetStandardsFilterInput): AssetStandardsAggExp
  assetStatuses(limit: Int, offset: Int, order_by: [AssetStatusesOrderBy!], where: AssetStatusesBoolExp): [AssetStatuses!]
  assetStatusesAggregate(filter_input: AssetStatusesFilterInput): AssetStatusesAggExp
  assetSupportTypes(limit: Int, offset: Int, order_by: [AssetSupportTypesOrderBy!], where: AssetSupportTypesBoolExp): [AssetSupportTypes!]
  assetSupportTypesAggregate(filter_input: AssetSupportTypesFilterInput): AssetSupportTypesAggExp
  assetTypes(limit: Int, offset: Int, order_by: [AssetTypesOrderBy!], where: AssetTypesBoolExp): [AssetTypes!]
  assetTypesAggregate(filter_input: AssetTypesFilterInput): AssetTypesAggExp
  assets(limit: Int, offset: Int, order_by: [AssetsOrderBy!], where: AssetsBoolExp): [Assets!]
  assetsAggregate(filter_input: AssetsFilterInput): AssetsAggExp
  coreTableNames(limit: Int, offset: Int, order_by: [CoreTableNamesOrderBy!], where: CoreTableNamesBoolExp): [CoreTableNames!]
  coreTableNamesAggregate(filter_input: CoreTableNamesFilterInput): CoreTableNamesAggExp
  countries(limit: Int, offset: Int, order_by: [CountriesOrderBy!], where: CountriesBoolExp): [Countries!]
  countriesAggregate(filter_input: CountriesFilterInput): CountriesAggExp
  deploymentTypes(limit: Int, offset: Int, order_by: [DeploymentTypesOrderBy!], where: DeploymentTypesBoolExp): [DeploymentTypes!]
  deploymentTypesAggregate(filter_input: DeploymentTypesFilterInput): DeploymentTypesAggExp
  derivativeAssets(limit: Int, offset: Int, order_by: [DerivativeAssetsOrderBy!], where: DerivativeAssetsBoolExp): [DerivativeAssets!]
  derivativeAssetsAggregate(filter_input: DerivativeAssetsFilterInput): DerivativeAssetsAggExp
  entities(limit: Int, offset: Int, order_by: [EntitiesOrderBy!], where: EntitiesBoolExp): [Entities!]
  entitiesAggregate(filter_input: EntitiesFilterInput): EntitiesAggExp
  entityTypes(limit: Int, offset: Int, order_by: [EntityTypesOrderBy!], where: EntityTypesBoolExp): [EntityTypes!]
  entityTypesAggregate(filter_input: EntityTypesFilterInput): EntityTypesAggExp
  productAssetRelationships(limit: Int, offset: Int, order_by: [ProductAssetRelationshipsOrderBy!], where: ProductAssetRelationshipsBoolExp): [ProductAssetRelationships!]
  productAssetRelationshipsAggregate(filter_input: ProductAssetRelationshipsFilterInput): ProductAssetRelationshipsAggExp
  productDeployments(limit: Int, offset: Int, order_by: [ProductDeploymentsOrderBy!], where: ProductDeploymentsBoolExp): [ProductDeployments!]
  productDeploymentsAggregate(filter_input: ProductDeploymentsFilterInput): ProductDeploymentsAggExp
  productStatuses(limit: Int, offset: Int, order_by: [ProductStatusesOrderBy!], where: ProductStatusesBoolExp): [ProductStatuses!]
  productStatusesAggregate(filter_input: ProductStatusesFilterInput): ProductStatusesAggExp
  productTypes(limit: Int, offset: Int, order_by: [ProductTypesOrderBy!], where: ProductTypesBoolExp): [ProductTypes!]
  productTypesAggregate(filter_input: ProductTypesFilterInput): ProductTypesAggExp
  products(limit: Int, offset: Int, order_by: [ProductsOrderBy!], where: ProductsBoolExp): [Products!]
  productsAggregate(filter_input: ProductsFilterInput): ProductsAggExp
  profileInfos(limit: Int, offset: Int, order_by: [ProfileInfosOrderBy!], where: ProfileInfosBoolExp): [ProfileInfos!]
  profileInfosAggregate(filter_input: ProfileInfosFilterInput): ProfileInfosAggExp
  profileInfosById(id: String1!): ProfileInfos
  profileSectors(limit: Int, offset: Int, order_by: [ProfileSectorsOrderBy!], where: ProfileSectorsBoolExp): [ProfileSectors!]
  profileSectorsAggregate(filter_input: ProfileSectorsFilterInput): ProfileSectorsAggExp
  profileStatuses(limit: Int, offset: Int, order_by: [ProfileStatusesOrderBy!], where: ProfileStatusesBoolExp): [ProfileStatuses!]
  profileStatusesAggregate(filter_input: ProfileStatusesFilterInput): ProfileStatusesAggExp
  """Selects multiple objects from the model. Model description:  """
  profileTags(limit: Int, offset: Int, order_by: [ProfileTagsOrderBy!], where: ProfileTagsBoolExp): [ProfileTags!]
  profileTagsAggregate(filter_input: ProfileTagsFilterInput): ProfileTagsAggExp
  profileTypes(limit: Int, offset: Int, order_by: [ProfileTypesOrderBy!], where: ProfileTypesBoolExp): [ProfileTypes!]
  profileTypesAggregate(filter_input: ProfileTypesFilterInput): ProfileTypesAggExp
  rootRelationshipTypes(limit: Int, offset: Int, where: RootRelationshipTypesBoolExp): [RootRelationshipTypes!]
  rootRelationshipTypesAggregate(filter_input: RootRelationshipTypesFilterInput): RootRelationshipTypesAggExp
  rootRelationshipTypesById(id: String1!): RootRelationshipTypes
  rootRelationships(limit: Int, offset: Int, where: RootRelationshipsBoolExp): [RootRelationships!]
  rootRelationshipsAggregate(filter_input: RootRelationshipsFilterInput): RootRelationshipsAggExp
  rootRelationshipsById(id: String1!): RootRelationships
  roots(limit: Int, offset: Int, order_by: [RootsOrderBy!], where: RootsBoolExp): [Roots!]
  rootsAggregate(filter_input: RootsFilterInput): RootsAggExp
  smartContractDeployments(limit: Int, offset: Int, order_by: [SmartContractDeploymentsOrderBy!], where: SmartContractDeploymentsBoolExp): [SmartContractDeployments!]
  smartContractDeploymentsAggregate(filter_input: SmartContractDeploymentsFilterInput): SmartContractDeploymentsAggExp
  smartContracts(limit: Int, offset: Int, order_by: [SmartContractsOrderBy!], where: SmartContractsBoolExp): [SmartContracts!]
  smartContractsAggregate(filter_input: SmartContractsFilterInput): SmartContractsAggExp
  socialStatuses(limit: Int, offset: Int, order_by: [SocialStatusesOrderBy!], where: SocialStatusesBoolExp): [SocialStatuses!]
  socialStatusesAggregate(filter_input: SocialStatusesFilterInput): SocialStatusesAggExp
  socialStatusesById(id: String1!): SocialStatuses
  socialTypes(limit: Int, offset: Int, order_by: [SocialTypesOrderBy!], where: SocialTypesBoolExp): [SocialTypes!]
  socialTypesAggregate(filter_input: SocialTypesFilterInput): SocialTypesAggExp
  socials(limit: Int, offset: Int, order_by: [SocialsOrderBy!], where: SocialsBoolExp): [Socials!]
  socialsAggregate(filter_input: SocialsFilterInput): SocialsAggExp
  """
  Selects multiple objects from the model. Model description: Table mapping product support relationships
  """
  supportsProducts(limit: Int, offset: Int, order_by: [SupportsProductsOrderBy!], where: SupportsProductsBoolExp): [SupportsProducts!]
  supportsProductsAggregate(filter_input: SupportsProductsFilterInput): SupportsProductsAggExp
  tagTypes(limit: Int, offset: Int, order_by: [TagTypesOrderBy!], where: TagTypesBoolExp): [TagTypes!]
  tagTypesAggregate(filter_input: TagTypesFilterInput): TagTypesAggExp
  tags(limit: Int, offset: Int, order_by: [TagsOrderBy!], where: TagsBoolExp): [Tags!]
  tagsAggregate(filter_input: TagsFilterInput): TagsAggExp
  theGridRankings(limit: Int, offset: Int, order_by: [theGridRankingOrderBy!], where: theGridRankingBoolExp): [theGridRanking!]
  urlTypes(limit: Int, offset: Int, order_by: [UrlTypesOrderBy!], where: UrlTypesBoolExp): [UrlTypes!]
  urlTypesAggregate(filter_input: UrlTypesFilterInput): UrlTypesAggExp
  urlTypesById(id: String1!): UrlTypes
  urls(limit: Int, offset: Int, order_by: [UrlsOrderBy!], where: UrlsBoolExp): [Urls!]
  urlsAggregate(filter_input: UrlsFilterInput): UrlsAggExp
  urlsById(id: String1!): Urls
  validation(limit: Int, offset: Int, order_by: [validationOrderBy!], where: validationBoolExp): [Validation!]
  validationAggregate(filter_input: validationFilterInput): validationAggExp
  validationById(id: Int64_1): Validation
}

scalar RawHttpMethod

"""Retry policy of request"""
input RetryPolicyInput {
  """Delay retry delay in milliseconds"""
  delay: Int32
  """List of HTTP status the connector will retry on"""
  httpStatus: [Int32!]
  """Number of retry times"""
  times: Int32!
}

type RootRelationshipTypes {
  definition: String1!
  id: String1!
  name: String1!
  rootRelationships(limit: Int, offset: Int, where: RootRelationshipsBoolExp): [RootRelationships!]
  rootRelationshipsAggregate(filter_input: RootRelationshipsFilterInput): RootRelationshipsAggExp!
  slug: String1
}

type RootRelationshipTypesAggExp {
  _count: Int!
  definition: StringAggExp!
  id: StringAggExp!
  name: StringAggExp!
  slug: StringAggExp!
}

input RootRelationshipTypesBoolExp {
  _and: [RootRelationshipTypesBoolExp!]
  _not: RootRelationshipTypesBoolExp
  _or: [RootRelationshipTypesBoolExp!]
  definition: StringBoolExp
  id: StringBoolExp
  name: StringBoolExp
  rootRelationships: RootRelationshipsBoolExp
  slug: StringBoolExp
}

input RootRelationshipTypesFilterInput {
  limit: Int
  offset: Int
  where: RootRelationshipTypesBoolExp
}

type RootRelationships {
  childRootId: String1!
  id: String1!
  parentRootId: String1!
  relationshipTypeId: String1
  rootRelationshipType: RootRelationshipTypes
}

type RootRelationshipsAggExp {
  _count: Int!
  childRootId: StringAggExp!
  id: StringAggExp!
  parentRootId: StringAggExp!
  relationshipTypeId: StringAggExp!
}

input RootRelationshipsBoolExp {
  _and: [RootRelationshipsBoolExp!]
  _not: RootRelationshipsBoolExp
  _or: [RootRelationshipsBoolExp!]
  childRootId: StringBoolExp
  id: StringBoolExp
  parentRootId: StringBoolExp
  relationshipTypeId: StringBoolExp
  rootRelationshipType: RootRelationshipTypesBoolExp
}

input RootRelationshipsFilterInput {
  limit: Int
  offset: Int
  where: RootRelationshipsBoolExp
}

type Roots {
  assets(limit: Int, offset: Int, order_by: [AssetsOrderBy!], where: AssetsBoolExp): [Assets!]
  assetsAggregate(filter_input: AssetsFilterInput): AssetsAggExp!
  connectionScoresAggregate(filter_input: theGridRankingFilterInput): theGridRankingAggExp!
  entities(limit: Int, offset: Int, order_by: [EntitiesOrderBy!], where: EntitiesBoolExp): [Entities!]
  entitiesAggregate(filter_input: EntitiesFilterInput): EntitiesAggExp!
  id: String1!
  products(limit: Int, offset: Int, order_by: [ProductsOrderBy!], where: ProductsBoolExp): [Products!]
  productsAggregate(filter_input: ProductsFilterInput): ProductsAggExp!
  profileInfos(limit: Int, offset: Int, order_by: [ProfileInfosOrderBy!], where: ProfileInfosBoolExp): [ProfileInfos!]
  profileInfosAggregate(filter_input: ProfileInfosFilterInput): ProfileInfosAggExp!
  profileTags(limit: Int, offset: Int, order_by: [ProfileTagsOrderBy!], where: ProfileTagsBoolExp): [ProfileTags!]
  profileTagsAggregate(filter_input: ProfileTagsFilterInput): ProfileTagsAggExp!
  slug: String1!
  socials(limit: Int, offset: Int, order_by: [SocialsOrderBy!], where: SocialsBoolExp): [Socials!]
  socialsAggregate(filter_input: SocialsFilterInput): SocialsAggExp!
  theGridRanking(limit: Int, offset: Int, order_by: [theGridRankingOrderBy!], where: theGridRankingBoolExp): [theGridRanking!]
  urlMain: String1!
  validationAggregate(filter_input: validationFilterInput): validationAggExp!
  validations(limit: Int, offset: Int, order_by: [validationOrderBy!], where: validationBoolExp): [Validation!]
}

type RootsAggExp {
  _count: Int!
  id: StringAggExp!
  slug: StringAggExp!
  urlMain: StringAggExp!
}

input RootsBoolExp {
  _and: [RootsBoolExp!]
  _not: RootsBoolExp
  _or: [RootsBoolExp!]
  assets: AssetsBoolExp
  entities: EntitiesBoolExp
  id: StringBoolExp
  products: ProductsBoolExp
  profileInfos: ProfileInfosBoolExp
  profileTags: ProfileTagsBoolExp
  slug: StringBoolExp
  socials: SocialsBoolExp
  theGridRanking: theGridRankingBoolExp
  urlMain: StringBoolExp
  validations: validationBoolExp
}

input RootsFilterInput {
  limit: Int
  offset: Int
  order_by: [RootsOrderBy!]
  where: RootsBoolExp
}

input RootsOrderBy {
  id: OrderBy
  slug: OrderBy
  urlMain: OrderBy
}

type SmartContractDeployments {
  assetDeployments(limit: Int, offset: Int, order_by: [AssetDeploymentsOrderBy!], where: assetDeploymentsBoolExp): [AssetDeployments!]
  assetDeploymentsAggregate(filter_input: AssetDeploymentsFilterInput): AssetDeploymentsAggExp!
  assetStandard: AssetStandards
  assetStandardId: String1
  deployedOnId: String1
  deployedOnProduct: Products
  deploymentType: DeploymentTypes
  deploymentTypeId: String1
  id: String1!
  productDeployments(limit: Int, offset: Int, order_by: [ProductDeploymentsOrderBy!], where: ProductDeploymentsBoolExp): [ProductDeployments!]
  productDeploymentsAggregate(filter_input: ProductDeploymentsFilterInput): ProductDeploymentsAggExp!
  smartContracts(limit: Int, offset: Int, order_by: [SmartContractsOrderBy!], where: SmartContractsBoolExp): [SmartContracts!]
  smartContractsAggregate(filter_input: SmartContractsFilterInput): SmartContractsAggExp!
}

type SmartContractDeploymentsAggExp {
  _count: Int!
  assetStandardId: StringAggExp!
  deployedOnId: StringAggExp!
  deploymentTypeId: StringAggExp!
  id: StringAggExp!
}

input SmartContractDeploymentsBoolExp {
  _and: [SmartContractDeploymentsBoolExp!]
  _not: SmartContractDeploymentsBoolExp
  _or: [SmartContractDeploymentsBoolExp!]
  assetDeployments: assetDeploymentsBoolExp
  assetStandard: AssetStandardsBoolExp
  assetStandardId: StringBoolExp
  deployedOnId: StringBoolExp
  deployedOnProduct: ProductsBoolExp
  deploymentType: DeploymentTypesBoolExp
  deploymentTypeId: StringBoolExp
  id: StringBoolExp
  productDeployments: ProductDeploymentsBoolExp
  smartContracts: SmartContractsBoolExp
}

input SmartContractDeploymentsFilterInput {
  limit: Int
  offset: Int
  order_by: [SmartContractDeploymentsOrderBy!]
  where: SmartContractDeploymentsBoolExp
}

input SmartContractDeploymentsOrderBy {
  assetStandard: AssetStandardsOrderBy
  assetStandardId: OrderBy
  deployedOnId: OrderBy
  deployedOnProduct: ProductsOrderBy
  deploymentType: DeploymentTypesOrderBy
  deploymentTypeId: OrderBy
  id: OrderBy
}

type SmartContracts {
  address: String1!
  deploymentDate: Date
  deploymentId: String1
  id: String1!
  name: String1!
  smartContractDeployment: SmartContractDeployments
}

type SmartContractsAggExp {
  _count: Int!
  address: StringAggExp!
  deploymentDate: DateAggExp!
  deploymentId: StringAggExp!
  id: StringAggExp!
  name: StringAggExp!
}

input SmartContractsBoolExp {
  _and: [SmartContractsBoolExp!]
  _not: SmartContractsBoolExp
  _or: [SmartContractsBoolExp!]
  address: StringBoolExp
  deploymentDate: DateBoolExp
  deploymentId: StringBoolExp
  id: StringBoolExp
  name: StringBoolExp
  smartContractDeployment: SmartContractDeploymentsBoolExp
}

input SmartContractsFilterInput {
  limit: Int
  offset: Int
  order_by: [SmartContractsOrderBy!]
  where: SmartContractsBoolExp
}

input SmartContractsOrderBy {
  address: OrderBy
  deploymentDate: OrderBy
  deploymentId: OrderBy
  id: OrderBy
  name: OrderBy
  smartContractDeployment: SmartContractDeploymentsOrderBy
}

type SocialStatuses {
  definition: String1!
  id: String1!
  name: String1!
  slug: String1!
  socials(limit: Int, offset: Int, order_by: [SocialsOrderBy!], where: SocialsBoolExp): [Socials!]
  socialsAggregate(filter_input: SocialsFilterInput): SocialsAggExp!
}

type SocialStatusesAggExp {
  _count: Int!
  definition: StringAggExp!
  id: StringAggExp!
  name: StringAggExp!
  slug: StringAggExp!
}

input SocialStatusesBoolExp {
  _and: [SocialStatusesBoolExp!]
  _not: SocialStatusesBoolExp
  _or: [SocialStatusesBoolExp!]
  definition: StringBoolExp
  id: StringBoolExp
  name: StringBoolExp
  slug: StringBoolExp
  socials: SocialsBoolExp
}

input SocialStatusesFilterInput {
  limit: Int
  offset: Int
  order_by: [SocialStatusesOrderBy!]
  where: SocialStatusesBoolExp
}

input SocialStatusesOrderBy {
  definition: OrderBy
  id: OrderBy
  name: OrderBy
  slug: OrderBy
}

type SocialTypes {
  definition: String1!
  id: String1!
  name: String1!
  slug: String1!
  socials(limit: Int, offset: Int, order_by: [SocialsOrderBy!], where: SocialsBoolExp): [Socials!]
  socialsAggregate(filter_input: SocialsFilterInput): SocialsAggExp!
}

type SocialTypesAggExp {
  _count: Int!
  definition: StringAggExp!
  id: StringAggExp!
  name: StringAggExp!
  slug: StringAggExp!
}

input SocialTypesBoolExp {
  _and: [SocialTypesBoolExp!]
  _not: SocialTypesBoolExp
  _or: [SocialTypesBoolExp!]
  definition: StringBoolExp
  id: StringBoolExp
  name: StringBoolExp
  slug: StringBoolExp
  socials: SocialsBoolExp
}

input SocialTypesFilterInput {
  limit: Int
  offset: Int
  order_by: [SocialTypesOrderBy!]
  where: SocialTypesBoolExp
}

input SocialTypesOrderBy {
  definition: OrderBy
  id: OrderBy
  name: OrderBy
  slug: OrderBy
}

type SocialUrls {
  id: String1
  rowId: String1
  tableId: String1
  url: String1
  urlType: UrlTypes
  urlTypeId: String1
}

input SocialUrlsBoolExp {
  _and: [SocialUrlsBoolExp!]
  _not: SocialUrlsBoolExp
  _or: [SocialUrlsBoolExp!]
  id: StringBoolExp
  rowId: StringBoolExp
  tableId: StringBoolExp
  url: StringBoolExp
  urlType: UrlTypesBoolExp
  urlTypeId: StringBoolExp
}

input SocialUrlsOrderBy {
  id: OrderBy
  rowId: OrderBy
  tableId: OrderBy
  url: OrderBy
  urlType: UrlTypesOrderBy
  urlTypeId: OrderBy
}

type Socials {
  coreTableName: CoreTableNames
  id: String1!
  """
  The name or handle associated with the Profile's social media account on the specified platform. This should match the name displayed on the social media profile page.
  """
  name: String1!
  root: Roots
  rootId: String1!
  rowId: String1!
  socialStatus: SocialStatuses
  socialStatusId: String1
  socialType: SocialTypes
  """
  The specific social media platform the URL belongs to (e.g. Twitter, Facebook, Discord). Refer to the standardized list of social media platforms.
  """
  socialTypeId: String1
  tableId: String1!
  urls(limit: Int, offset: Int, order_by: [SocialUrlsOrderBy!], where: SocialUrlsBoolExp): [SocialUrls!]
}

type SocialsAggExp {
  _count: Int!
  id: StringAggExp!
  name: StringAggExp!
  rootId: StringAggExp!
  rowId: StringAggExp!
  socialStatusId: StringAggExp!
  socialTypeId: StringAggExp!
  tableId: StringAggExp!
}

input SocialsBoolExp {
  _and: [SocialsBoolExp!]
  _not: SocialsBoolExp
  _or: [SocialsBoolExp!]
  id: StringBoolExp
  name: StringBoolExp
  root: RootsBoolExp
  rootId: StringBoolExp
  rowId: StringBoolExp
  socialStatus: SocialStatusesBoolExp
  socialStatusId: StringBoolExp
  socialType: SocialTypesBoolExp
  socialTypeId: StringBoolExp
  tableId: StringBoolExp
}

input SocialsFilterInput {
  limit: Int
  offset: Int
  order_by: [SocialsOrderBy!]
  where: SocialsBoolExp
}

input SocialsOrderBy {
  coreTableName: CoreTableNamesOrderBy
  id: OrderBy
  name: OrderBy
  root: RootsOrderBy
  rootId: OrderBy
  rowId: OrderBy
  socialStatus: SocialStatusesOrderBy
  socialStatusId: OrderBy
  socialType: SocialTypesOrderBy
  socialTypeId: OrderBy
  tableId: OrderBy
}

scalar String1

scalar String2

type StringAggExp {
  _count: Int!
  _count_distinct: Int!
  max: String1!
  min: String1!
}

type StringAggExp2 {
  _count: Int!
  _count_distinct: Int!
  max: String2!
  min: String2!
}

input StringBoolExp {
  _contains: String1
  _eq: String1
  _in: [String1!]
  _is_null: Boolean
  _like: String1
}

input StringBoolExp2 {
  _contains: String2
  _eq: String2
  _in: [String2!]
  _is_null: Boolean
  _like: String2
}

type Subscription {
  allowedUrlTypes(limit: Int, offset: Int, where: AllowedUrlTypesBoolExp): [AllowedUrlTypes!]
  allowedUrlTypesAggregate(filter_input: AllowedUrlTypesFilterInput): AllowedUrlTypesAggExp
  allowedUrlTypesById(id: String1!): AllowedUrlTypes
  rootRelationshipTypes(limit: Int, offset: Int, where: RootRelationshipTypesBoolExp): [RootRelationshipTypes!]
  rootRelationshipTypesAggregate(filter_input: RootRelationshipTypesFilterInput): RootRelationshipTypesAggExp
  rootRelationshipTypesById(id: String1!): RootRelationshipTypes
  rootRelationships(limit: Int, offset: Int, where: RootRelationshipsBoolExp): [RootRelationships!]
  rootRelationshipsAggregate(filter_input: RootRelationshipsFilterInput): RootRelationshipsAggExp
  rootRelationshipsById(id: String1!): RootRelationships
  validationAggregate(filter_input: validationFilterInput): validationAggExp
}

"""Table mapping product support relationships"""
type SupportsProducts {
  id: String1!
  product: Products
  productId: String1!
  supportsProduct: Products
  supportsProductId: String1!
}

type SupportsProductsAggExp {
  _count: Int!
  id: StringAggExp!
  productId: StringAggExp!
  supportsProductId: StringAggExp!
}

input SupportsProductsBoolExp {
  _and: [SupportsProductsBoolExp!]
  _not: SupportsProductsBoolExp
  _or: [SupportsProductsBoolExp!]
  id: StringBoolExp
  product: ProductsBoolExp
  productId: StringBoolExp
  supportsProduct: ProductsBoolExp
  supportsProductId: StringBoolExp
}

input SupportsProductsFilterInput {
  limit: Int
  offset: Int
  order_by: [SupportsProductsOrderBy!]
  where: SupportsProductsBoolExp
}

input SupportsProductsOrderBy {
  id: OrderBy
  product: ProductsOrderBy
  productId: OrderBy
  supportsProduct: ProductsOrderBy
  supportsProductId: OrderBy
}

type TagTypes {
  definition: String1!
  id: String1!
  name: String1!
  slug: String1!
  tags(limit: Int, offset: Int, order_by: [TagsOrderBy!], where: TagsBoolExp): [Tags!]
  tagsAggregate(filter_input: TagsFilterInput): TagsAggExp!
}

type TagTypesAggExp {
  _count: Int!
  definition: StringAggExp!
  id: StringAggExp!
  name: StringAggExp!
  slug: StringAggExp!
}

input TagTypesBoolExp {
  _and: [TagTypesBoolExp!]
  _not: TagTypesBoolExp
  _or: [TagTypesBoolExp!]
  definition: StringBoolExp
  id: StringBoolExp
  name: StringBoolExp
  slug: StringBoolExp
  tags: TagsBoolExp
}

input TagTypesFilterInput {
  limit: Int
  offset: Int
  order_by: [TagTypesOrderBy!]
  where: TagTypesBoolExp
}

input TagTypesOrderBy {
  definition: OrderBy
  id: OrderBy
  name: OrderBy
  slug: OrderBy
}

type Tags {
  description: String1!
  id: String1!
  isArchived: String1
  name: String1!
  profileTags(limit: Int, offset: Int, order_by: [ProfileTagsOrderBy!], where: ProfileTagsBoolExp): [ProfileTags!]
  profileTagsAggregate(filter_input: ProfileTagsFilterInput): ProfileTagsAggExp!
  slug: String1!
  tagType: TagTypes
  tagTypeId: String1
}

type TagsAggExp {
  _count: Int!
  description: StringAggExp!
  id: StringAggExp!
  isArchived: StringAggExp!
  name: StringAggExp!
  slug: StringAggExp!
  tagTypeId: StringAggExp!
}

input TagsBoolExp {
  _and: [TagsBoolExp!]
  _not: TagsBoolExp
  _or: [TagsBoolExp!]
  description: StringBoolExp
  id: StringBoolExp
  isArchived: StringBoolExp
  name: StringBoolExp
  profileTags: ProfileTagsBoolExp
  slug: StringBoolExp
  tagType: TagTypesBoolExp
  tagTypeId: StringBoolExp
}

input TagsFilterInput {
  limit: Int
  offset: Int
  order_by: [TagsOrderBy!]
  where: TagsBoolExp
}

input TagsOrderBy {
  description: OrderBy
  id: OrderBy
  isArchived: OrderBy
  name: OrderBy
  slug: OrderBy
  tagType: TagTypesOrderBy
  tagTypeId: OrderBy
}

scalar Timestamp

type TimestampAggExp {
  _count: Int!
  _count_distinct: Int!
}

input TimestampBoolExp {
  _eq: Timestamp
  _gt: Timestamp
  _gte: Timestamp
  _in: [Timestamp!]
  _is_null: Boolean
  _lt: Timestamp
  _lte: Timestamp
}

type UrlTypes {
  definition: String1!
  id: String1!
  name: String1!
  slug: String1!
  urls(limit: Int, offset: Int, order_by: [UrlsOrderBy!], where: UrlsBoolExp): [Urls!]
  urlsAggregate(filter_input: UrlsFilterInput): UrlsAggExp!
}

type UrlTypesAggExp {
  _count: Int!
  definition: StringAggExp!
  id: StringAggExp!
  name: StringAggExp!
  slug: StringAggExp!
}

input UrlTypesBoolExp {
  _and: [UrlTypesBoolExp!]
  _not: UrlTypesBoolExp
  _or: [UrlTypesBoolExp!]
  definition: StringBoolExp
  id: StringBoolExp
  name: StringBoolExp
  slug: StringBoolExp
  urls: UrlsBoolExp
}

input UrlTypesFilterInput {
  limit: Int
  offset: Int
  order_by: [UrlTypesOrderBy!]
  where: UrlTypesBoolExp
}

input UrlTypesOrderBy {
  definition: OrderBy
  id: OrderBy
  name: OrderBy
  slug: OrderBy
}

type Urls {
  coreTableName: CoreTableNames
  id: String1!
  rowId: String1!
  tableId: String1!
  """
  This is a URL that links to different types, it must always start with a http:// or https://.
  """
  url: String1!
  urlType: UrlTypes
  """
  Categorizes the purpose and content of a URL based on its table group in the TGS. The URL type must align with both the content it links to and the context of its parameter group (Profile/Product/Asset/Entity/Social).
  """
  urlTypeId: String1
}

type UrlsAggExp {
  _count: Int!
  id: StringAggExp!
  rowId: StringAggExp!
  tableId: StringAggExp!
  url: StringAggExp!
  urlTypeId: StringAggExp!
}

input UrlsBoolExp {
  _and: [UrlsBoolExp!]
  _not: UrlsBoolExp
  _or: [UrlsBoolExp!]
  coreTableName: CoreTableNamesBoolExp
  id: StringBoolExp
  rowId: StringBoolExp
  tableId: StringBoolExp
  url: StringBoolExp
  urlType: UrlTypesBoolExp
  urlTypeId: StringBoolExp
}

input UrlsFilterInput {
  limit: Int
  offset: Int
  order_by: [UrlsOrderBy!]
  where: UrlsBoolExp
}

input UrlsOrderBy {
  coreTableName: CoreTableNamesOrderBy
  id: OrderBy
  rowId: OrderBy
  tableId: OrderBy
  url: OrderBy
  urlType: UrlTypesOrderBy
  urlTypeId: OrderBy
}

type Validation {
  id: Int64_1
  resolution: Json_1
  resolvedAt: Timestamp
  rootId: String2
  roots(limit: Int, offset: Int, order_by: [RootsOrderBy!], where: RootsBoolExp): [Roots!]
  rootsAggregate(filter_input: RootsFilterInput): RootsAggExp!
}

input assetDeploymentsBoolExp {
  _and: [assetDeploymentsBoolExp!]
  _not: assetDeploymentsBoolExp
  _or: [assetDeploymentsBoolExp!]
  asset: AssetsBoolExp
  assetId: StringBoolExp
  deploymentId: StringBoolExp
  id: StringBoolExp
  smartContractDeployment: SmartContractDeploymentsBoolExp
}

type theGridRanking {
  """
  The Connection score (0-100) of the profile, supporting decimal values for more precision
  """
  connectionScore: String1!
  """The root ID of the profile"""
  rootId: String1!
  roots(limit: Int, offset: Int, order_by: [RootsOrderBy!], where: RootsBoolExp): [Roots!]
  theGridRankingsAggregate(filter_input: RootsFilterInput): RootsAggExp!
}

type theGridRankingAggExp {
  _count: Int!
  connectionScore: StringAggExp!
  rootId: StringAggExp!
}

input theGridRankingBoolExp {
  _and: [theGridRankingBoolExp!]
  _not: theGridRankingBoolExp
  _or: [theGridRankingBoolExp!]
  connectionScore: StringBoolExp
  rootId: StringBoolExp
  roots: RootsBoolExp
}

input theGridRankingFilterInput {
  limit: Int
  offset: Int
  order_by: [theGridRankingOrderBy!]
  where: theGridRankingBoolExp
}

input theGridRankingOrderBy {
  connectionScore: OrderBy
  rootId: OrderBy
}

type validationAggExp {
  _count: Int!
  id: Int64AggExp_1!
  resolution: JsonAggExp_1!
  resolvedAt: TimestampAggExp!
  rootId: StringAggExp2!
}

input validationBoolExp {
  _and: [validationBoolExp!]
  _not: validationBoolExp
  _or: [validationBoolExp!]
  id: Int64BoolExp_1
  resolution: JsonBoolExp_1
  resolvedAt: TimestampBoolExp
  rootId: StringBoolExp2
  roots: RootsBoolExp
}

input validationFilterInput {
  limit: Int
  offset: Int
  order_by: [validationOrderBy!]
  where: validationBoolExp
}

input validationOrderBy {
  id: OrderBy
  resolution: OrderBy
  resolvedAt: OrderBy
  rootId: OrderBy
}